openapi: 3.0.0
info:
  version: 1.0.0
  title: Hang Coffee API
  description: >
    API endpoints for a Hang Coffee App services documented on swagger
servers:
  - url: http://localhost:8080/api/v1
    description: dev server
  - url: http://localhost:4000/api/v1
    description: prod server
components:
  schemas:
    Cafe:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        name:
          type: string
          example: Baracca
        image:
          type: array
          items:
            type: string
            example: https://biyudum.com/images/slider/s178mxor2t.jpg
        working_hours:
          type: string
          example: 09.30-00.30
        cafe_type:
          type: string
          example: Cafe
        address:
          type: string
          example: Türkali, Türkali Mahallesi Ihlamurdere Caddesi, Misirli Bahçe Sk. No:4/A, 34357 Beşiktaş/İstanbul
        about:
          type: string
          example: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.
    Table:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        tableName:
          type: string
          example: B-4
        quota:
          type: integer
          example: 4
        tableInfo:
          type: string
          example: This table reserved for 4 person
    User:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        name:
          type: string
          example: Admin User
        email:
          type: string
          example: admin1@gmail.com
        role:
          type: array
          items:
            type: string
            example: user
    Employee:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        workingType:
          type: string
          example: barista
        cafe:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        user:
          type: object
          $ref: "#/components/schemas/User"
    Comment:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        messsage:
          type: string
          example: This cafe's brownies so hot
        createdAt:
          type: string
          example: "03.04.04"
    FoodCategory:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        cafe:
          type: object
          $ref: "#/components/schemas/Cafe"
        categoryImage:
          type: string
          example: test.image
        categoryName:
          type: string
          example: Burgers
    Food:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        cafe:
          type: string
          $ref: 655a35d7bd1bc32a1d44554a
        foodImage:
          type: string
          example: test.image
        foodName:
          type: string
          example: Jays Burger
        price:
          type: integer
          example: 100
    Check:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        table:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        foods:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/CheckFood"
        cafe:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        total_price:
          type: integer
          example: 1190
        isPaid:
          type: boolean
          example: false
        createdAt:
          type: string
          example: "2024-06-11T13:41:01.415Z"
    CheckFood:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        user:
          type: object
          $ref: "#/components/schemas/User"
        food:
          type: object
          $ref: "#/components/schemas/Food"
        table:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        check:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        quantity:
          type: integer
          example: 3
        createdAt:
          type: string
          example: "2024-06-11T13:41:01.415Z"
    Job:
      properties:
        _id:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        createdBy:
          type: string
          $ref: 655a35d7bd1bc32a1d44554a
        cafe:
          type: string
          example: 655a35d7bd1bc32a1d44554a
        position:
          type: string
          example: Service
        job_type:
          type: string
          example: Part-Time
        experience_type:
          type: string
          example: 0-1 year
        appliedBy:
          type: array
          items:
            type: string
            example: 655a35d7bd1bc32a1d44554a
        createdAt:
          type: string
          example: "2024-06-11T13:41:01.415Z"
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      description: JWT Authorization
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags: [Auth]
      description: >
        User Registeration
      summary: User Registeration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - confirmPassword
              properties:
                name:
                  type: string
                  default: Test User
                email:
                  type: string
                  default: testuser1@gmail.com
                password:
                  type: string
                  default: testuser1
                confirmPassword:
                  type: string
                  default: testuser1
              example:
                name: Test User
                email: testuser1@gmail.com
                password: testuser1
                confirmPassword: testuser1
      responses:
        "201":
          description: It will return Bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Account created sucessfully
        "401":
          description: It will return error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User with given email already exist"
                  error:
                    type: object
                    properties:
                      statusCode:
                        type: integer
                        example: 401
                      status:
                        type: string
                        example: fail
  /auth/login:
    post:
      tags: [Auth]
      description: >
        User Login
      summary: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  default: testuser1@gmail.com
                password:
                  type: string
                  default: testuser1
              example:
                email: testuser1@gmail.com
                password: testuser1
      responses:
        "200":
          description: It will Bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login succesfull"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MmQ2ODEyYTk2ZjQ4YTkwZmEyNWUyOSIsImlhdCI6MTcxNDI1MTc5NCwiZXhwIjoxNzE0ODU2NTk0fQ.oHm6BeeuMj8p6FkPdGP-CN9X0W760d8_OuG2sNp3b-4
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MmQ2ODEyYTk2ZjQ4YTkwZmEyNWUyOSIsImlhdCI6MTcxNDI1MTc5NCwiZXhwIjoxNzE0ODU2NTk0fQ.oHm6BeeuMj8p6FkPdGP-CN9X0W760d8_OuG2sNp3b-4
                      token_type:
                        type: string
                        example: Bearer
        "401":
          description: It will return Unauthorized errror
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid Email or password"
                  error:
                    type: object
                    properties:
                      statusCode:
                        type: integer
                        example: 401
                      status:
                        type: string
                        example: fail
  /auth/refreshToken/{refreshToken}:
    post:
      tags: [Auth]
      description: >
        Get AccessToken via RefreshToken
      summary: Get AccessToken via RefreshToken
      parameters:
        - in: path
          name: refreshToken
          schema:
            type: string
          required: true
          description: refresh token to refresh access token
      responses:
        "200":
          description: It will return new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Access token created successfully"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MmQ2ODEyYTk2ZjQ4YTkwZmEyNWUyOSIsImlhdCI6MTcxNDI1MTc5NCwiZXhwIjoxNzE0ODU2NTk0fQ.oHm6BeeuMj8p6FkPdGP-CN9X0W760d8_OuG2sNp3b-4
        "401":
          description: Unauthorized error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid refresh token"
                  error:
                    type: object
                    properties:
                      error:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Invalid refresh token
                      statusCode:
                        type: integer
                        example: 401
    delete:
      tags: [Auth]
      description: >
        User Logout
      summary: Logout via refreshToken
      parameters:
        - in: path
          name: refreshToken
          schema:
            type: string
          required: true
          description: refresh token to refresh access token
      responses:
        "200":
          description: It will Bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login succesfull"
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MmQ2ODEyYTk2ZjQ4YTkwZmEyNWUyOSIsImlhdCI6MTcxNDI1MTc5NCwiZXhwIjoxNzE0ODU2NTk0fQ.oHm6BeeuMj8p6FkPdGP-CN9X0W760d8_OuG2sNp3b-4
  /auth/me:
    get:
      tags: [Auth]
      description: >
        Get User Profile Information
      summary: Get User Profile Information
      responses:
        "200":
          description: Return User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 6647db8750f3f8ab054aad1a
                          name:
                            type: string
                            example: Test User
                          email:
                            type: string
                            example: testuser1@gmail.com
                          role:
                            type: array
                            items:
                              type: string
                              default: user
        "401":
          description: Unauthorized error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid access token"
                  error:
                    type: object
                    properties:
                      error:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Invalid access token
                      statusCode:
                        type: integer
                        example: 401
  /admin/updateRole/{userId}:
    put:
      tags: [Admin]
      summary: Update user role
      description: Update user role
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "... role added into roles as ..."
        "400":
          description: User already has the role error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User already has the role"
        "404":
          description: User not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
  /admin/users:
    get:
      tags: [Admin]
      summary: Get Users list
      description: Get Users list
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/User"
  /admin/users/{userId}:
    get:
      tags: [Admin]
      summary: Get user with spesific id
      description: Get user with spesific id
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: null
                  data:
                    type: object
                    $ref: "#/components/schemas/User"
        "404":
          description: User not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
    delete:
      tags: [Admin]
      summary: Delete user with spesific id
      description: Delete user with spesific id
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        "404":
          description: User not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
  /employer/employee/{userId}:
    post:
      tags: [Employer]
      summary: Add Specific user to cafe as Employee
      description: Add Specific user to cafe as Employee
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: BEmployee 5  added as employee to your cafe as barista
    put:
      tags: [Employer]
      summary: Edit Specific user to cafe as Employee
      description: Edit Specific user to cafe as Employee
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - workingType
              properties:
                workingType:
                  type: string
                  default: cook
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: BEmployee 5  added as employee to your cafe as barista
        "404":
          description: User not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
    delete:
      tags: [Employer]
      summary: Dlete Specific user to cafe as Employee
      description: Dlete Specific user to cafe as Employee
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: The id of user
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: BEmployee 5  deleted as employee from your cafe
        "404":
          description: User not found error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
  /employer/employees:
    get:
      tags: [Employer]
      summary: Get Employees for the Cafe
      description: Get Employees for the Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  lentg:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Employee"
  /employer/updateCafe:
    put:
      tags: [Employer]
      summary: Update a specific cafe With Cafe Id
      description: Update a specific cafe With Cafe Id
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - workingType
              properties:
                food_card:
                  type: array
                  items:
                    type: string
                    default: Sodexo
      responses:
        "200":
          description: It will return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: cafe succesfully updated
        "404":
          description: It will return error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: cafe did not found
  /employer/checks:
    get:
      tags: [Employer]
      description: >
        Payment of the check
      summary: Payment of the check
      parameters:
        - in: query
          name: isPaid
          schema:
            type: boolean
          description: If you want to see paid checks make it true or false otherwise it will send you all checks
      responses:
        "200":
          description: It will success message if check paid successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Check"
  /employer/job/{jobId}:
    get:
      tags: [Employer]
      description: >
        Get job for employer to see users who applied by jobId
      summary: Get job for employer to see users who applied by jobId
      responses:
        "200":
          description: It will return Job object with applicant information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Job"
  /cafes:
    get:
      tags: [Cafe]
      description: >
        Hang Coffee Get Cafes
      summary: Hang Coffee Get Cafe List
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Cafe"
    post:
      tags: [Cafe]
      description: >
        Hang Coffee Create Cafe
      summary: Hang Coffee Create a Cafe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - image
                - working_hours
                - cafe_type
                - address
                - about
              properties:
                name:
                  type: string
                  default: Bear&Hall
                image:
                  type: array
                  items:
                    type: string
                    default: "https://media.timeout.com/images/105164311/image.jpg"
                working_hours:
                  type: string
                  default: 17.30-04.30
                cafe_type:
                  type: string
                  default: Pub
                address:
                  type: string
                  default: Türkali, Türkali Mahallesi Ihlamurdere Caddesi, Misirli Bahçe Sk. No:4/A, 34357 Beşiktaş/İstanbul
                about:
                  type: string
                  default: Should be less than 150 char
              example:
                name: "Bear&Hall"
                image:
                  [
                    "https://media.timeout.com/images/105164311/image.jpg",
                    "https://www.meyhankoli.com/img/places/source_seo/beerhall-0.jpg",
                    "https://fastly.4sqi.net/img/general/600x600/38701219_vDVfisKtMpZW14FA8B18Yki0w1XEbWFMP8DFnBob-1Y.jpg",
                  ]
                working_hours: "17.30-04.30"
                cafe_type: "Pub"
                address: "Türkali, Türkali Mahallesi Ihlamurdere Caddesi, Misirli Bahçe Sk. No:4/A, 34357 Beşiktaş/İstanbul"
                about: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy "
      responses:
        "200":
          description: It will Bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  dialogType:
                    type: string
                    example: snackBar
                  message:
                    type: string
                    example: Cafe Created
                  data:
                    type: object
                    $ref: "#/components/schemas/Cafe"
  /cafes/{cafeId}:
    get:
      tags: [Cafe]
      summary: Hang Coffee Get Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Cafe"
    delete:
      tags: [Cafe]
      summary: Hang Coffee Delete Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: Cafe deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  dialogType:
                    type: string
                    example: snackBar
                  message:
                    type: string
                    example: "Cafe is deleted"
    put:
      tags: [Cafe]
      summary: Hang Coffee Update Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - image
                - working_hours
                - cafe_type
                - ratings
              properties:
                name:
                  type: string
                  default: Bear&Hall
                image:
                  type: array
                  items:
                    type: string
                    default: "https://media.timeout.com/images/105164311/image.jpg"
                working_hours:
                  type: string
                  default: 17.30-04.30
                cafe_type:
                  type: string
                  default: Pub
                ratings:
                  type: integer
                  default: 4.4
              example:
                name: "Bear&Hall"
                image:
                  [
                    "https://media.timeout.com/images/105164311/image.jpg",
                    "https://www.meyhankoli.com/img/places/source_seo/beerhall-0.jpg",
                    "https://fastly.4sqi.net/img/general/600x600/38701219_vDVfisKtMpZW14FA8B18Yki0w1XEbWFMP8DFnBob-1Y.jpg",
                  ]
                working_hours: "17.30-04.30"
                cafe_type: "Pub"
                ratings: 4.4
      responses:
        "200":
          description: Cafe deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  dialogType::
                    type: string
                    example: snackBar
                  message:
                    type: string
                    example: "Cafe is deleted"
  /tables/addTable:
    post:
      tags: [Table]
      description: >
        Only Employer can Create Table for a specific Cafe
      summary: Only Employer can Create Table for a specific Cafe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tableName
                - quota
                - tableInfo
              properties:
                tableName:
                  type: string
                  default: B-4
                quota:
                  type: string
                  default: 4
                tableInfo:
                  type: string
                  default: This table reserved for 4 person
              example:
                tableName: B-4
                quota: 4
                tableInfo: This table reserved for 4 person
      responses:
        "201":
          description: Table created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Table"
  /tables/cafe/{cafeId}:
    get:
      tags: [Table]
      description: >
        Hang Coffee Get Tables for specific Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Table"
  /tables/{tableId}:
    get:
      tags: [Table]
      description: >
        Hang Coffee Get A Specific Table
      summary: Hang Coffee Get A Specific Table
      parameters:
        - in: path
          name: tableId
          schema:
            type: string
          required: true
          description: The id of table
      responses:
        "201":
          description: Table fetch succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Table"
    delete:
      tags: [Table]
      description: >
        Hang Coffee Delete A Specific Table
      summary: Hang Coffee Delete A Specific Table
      parameters:
        - in: path
          name: tableId
          schema:
            type: string
          required: true
          description: The id of table
      responses:
        "200":
          description: Table deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Table deleted succesfully
    put:
      tags: [Table]
      description: >
        Hang Coffee Update A Specific Table
      summary: Hang Coffee Update A Specific Table
      parameters:
        - in: path
          name: tableId
          schema:
            type: string
          required: true
          description: The id of table
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tableName
                - quota
                - tableInfo
              properties:
                tableName:
                  type: string
                  default: B-4
                quota:
                  type: string
                  default: 4
                tableInfo:
                  type: string
                  default: This table reserved for 4 person
              example:
                tableName: B-4
                quota: 4
                tableInfo: This table reserved for 4 person
      responses:
        "200":
          description: Table updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Table updated succesfully
  /comments/cafe/{cafeId}:
    get:
      tags: [Comment]
      description: >
        Get Comments for specific Cafe
      summary: Get Comments for specific Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Comment"
    post:
      tags: [Comment]
      description: >
        Create a Comment for a specific Cafe
      summary: Create a Comment for a specific Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  default: This cafe so hot
              example:
                message: This cafe so hot
      responses:
        "201":
          description: Comment created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Table"
  /comments/{commentId}:
    delete:
      tags: [Comment]
      description: >
        Delete specific comment
      summary: Delete specific comment
      parameters:
        - in: path
          name: commentId
          schema:
            type: string
          required: true
          description: The id of comment
      responses:
        "200":
          description: It will return success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Comment is deleted
  /foodCategory/addCategory:
    post:
      tags: [Food Category]
      description: >
        Only Employer can Create a  Food Category By Cafe
      summary: Only Employer can Create a  Food Category By Cafe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                categoryImage:
                  type: string
                  default: Burgers
                categoryName:
                  type: string
                  default: Burgers
              example:
                categoryImage: Burgers
                categoryName: Burgers
      responses:
        "201":
          description: Comment created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/FoodCategory"
  /foodCategory/cafe/{cafeId}:
    get:
      tags: [Food Category]
      description: >
        Get Food Categories By Cafe
      summary: Get Food Categories By Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/FoodCategory"
  /foodCategory/{categoryId}:
    get:
      tags: [Food Category]
      description: >
        Get Food Category By Cafe Id and Category Id
      summary: Get Food Category By Cafe Id and Category Id
      parameters:
        - in: path
          name: categoryId
          schema:
            type: string
          required: true
          description: The id of category
      responses:
        "200":
          description: It will return cafe list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: object
                    $ref: "#/components/schemas/FoodCategory"
    put:
      tags: [Food Category]
      description: >
        Update a Food Category By CafeId and CategoryId
      summary: Update a Food Category By CafeId and CategoryId
      parameters:
        - in: path
          name: categoryId
          schema:
            type: string
          required: true
          description: The id of category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                categoryImage:
                  type: string
                  default: Burgers
                categoryName:
                  type: string
                  default: Burgers
              example:
                categoryImage: Burgers
                categoryName: Burgers
      responses:
        "200":
          description: Category updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/FoodCategory"
    delete:
      tags: [Food Category]
      description: >
        Delete a Food Category By Cafe Id and Category Id
      summary: Delete a Food Category By Cafe Id and Category Id
      parameters:
        - in: path
          name: categoryId
          schema:
            type: string
          required: true
          description: The id of category
      responses:
        "200":
          description: Category deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
  /food/{foodId}:
    get:
      tags: [Food]
      description: >
        Get Food By FoodId
      summary: Get Food By FoodId
      parameters:
        - in: path
          name: foodId
          schema:
            type: string
            minimum: 1
          required: true
          description: The id of food
      responses:
        "200":
          description: It will return food
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: object
                    $ref: "#/components/schemas/FoodCategory"
    put:
      tags: [Food]
      description: >
        Update a Food By Food Id
      summary: Update a Food By Food Id
      parameters:
        - in: path
          name: foodId
          schema:
            type: string
            minimum: 1
          required: true
          description: The id of food
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                foodImage:
                  type: string
                  default: Burgers
                foodName:
                  type: string
                  default: Burgers
                price:
                  type: integer
                  default: 100
              example:
                foodImage: burgers.jpeg
                foodName: Jays Burger
                price: 100
      responses:
        "200":
          description: Food updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: food updated succesfully
    delete:
      tags: [Food]
      description: >
        Delete a Food By Food Id
      summary: Delete a Food By Food Id
      parameters:
        - in: path
          name: foodId
          schema:
            type: string
            minimum: 1
          required: true
          description: The id of food
      responses:
        "200":
          description: Food deleted succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: food delete succesfully
  /food/addFood:
    post:
      tags: [Food]
      description: >
        Only Employer can Create a Food By Cafe Id and Category Id
      summary: Only Employer can Create a Food By Cafe Id and Category Id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - foodImage
                - foodName
                - price
              properties:
                foodImage:
                  type: string
                  default: Burgers
                foodName:
                  type: string
                  default: Burgers
                price:
                  type: integer
                  default: 100
              example:
                foodImage: burgers.jpeg
                foodName: Jays Burger
                price: 100
      responses:
        "200":
          description: Food created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: food created succesfully
  /food/cafe/{cafeId}:
    get:
      tags: [Food]
      description: >
        Get All Foods By Cafe
      summary: Get All Foods By Cafe
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: It will return foods
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Food"
  /food/category/{categoryId}:
    get:
      tags: [Food]
      description: >
        Get All Foods By Category Id
      summary: Get All Foods By Category Id
      parameters:
        - in: path
          name: categoryId
          schema:
            type: string
          required: true
          description: The id of food category
      responses:
        "200":
          description: It will return foods
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Food"
  /check/table/{tableId}:
    post:
      tags: [Check]
      description: >
        Create or Update Check
      summary: Create or Update Check
      parameters:
        - in: path
          name: tableId
          schema:
            type: string
          required: true
          description: The id of table
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - checkFoods
              properties:
                checkFoods:
                  type: array
                  items:
                    type: object
                    properties:
                      food:
                        type: string
                        default: 665f315a9610fe06b5ce2a21
                      quantity:
                        type: integer
                        default: 2
      responses:
        "200":
          description: It will success message if check created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 4
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Food"
  /check/{checkId}:
    get:
      tags: [Check]
      description: >
        Get The Check with check id
      summary: Get The Check with check id
      parameters:
        - in: path
          name: checkId
          schema:
            type: string
          required: true
          description: The id of check
      responses:
        "200":
          description: It will success message if check created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Check"
  /check/{checkId}/paid:
    put:
      tags: [Check]
      description: >
        Payment of the check
      summary: Payment of the check
      parameters:
        - in: path
          name: checkId
          schema:
            type: string
          required: true
          description: The id of check
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - payment_method
              properties:
                payment_method:
                  type: string
                  default: Credit Cart
              example:
                payment_method: Credit Cart
      responses:
        "200":
          description: It will success message if check paid successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Payment done
  /jobs/createJob:
    post:
      tags: [Job]
      description: >
        Only Employers can create a job
      summary: Only Employers can create a job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - position
                - job_type
                - experience_type
              properties:
                position:
                  type: string
                  default: Service
                job_type:
                  type: string
                  default: Part-Time
                experience_type:
                  type: string
                  default: 0-1 year
              example:
                foodImage: Service
                foodName: Part-Time
                price: 0-1 year
      responses:
        "200":
          description: Job Oppurtunity created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Job Oppurtunity created succesfully
  /jobs:
    get:
      tags: [Job]
      description: >
        Get All Jobs
      summary: Get All Jobs
      responses:
        "200":
          description: Get All Jobs list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 2
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Job"
  /jobs/cafe/{cafeId}:
    get:
      tags: [Job]
      description: >
        Get Jobs By Cafe Id
      summary: Get Jobs By Cafe Id
      parameters:
        - in: path
          name: cafeId
          schema:
            type: string
          required: true
          description: The id of cafe
      responses:
        "200":
          description: Get All Jobs list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  length:
                    type: integer
                    example: 2
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/Job"
  /jobs/apply/{jobId}:
    put:
      tags: [Job]
      description: >
        Apply to a job
      summary: Apply to a job
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
          description: The id of specific job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  default: 665f07ca6d6b1532678f1185
              example:
                userId: 665f07ca6d6b1532678f1185
      responses:
        "200":
          description: Successfully applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Your application received
  /jobs/{jobId}:
    get:
      tags: [Job]
      description: >
        Get a specific job
      summary: Get a specific job
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
          description: The id of job
      responses:
        "200":
          description: Return success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    $ref: "#/components/schemas/Job"
    put:
      tags: [Job]
      description: >
        Owner of the job advert can update the advert
      summary: Owner of the job advert can update the advert
      parameters:
        - in: path
          name: jobId
          schema:
            type: string
          required: true
          description: The id of job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  type: string
                  default: Barista
                job_type:
                  type: string
                  default: Full-Time
                experience_type:
                  type: string
                  default: 2 years
              example:
                position: Barista
                job_type: Full-Time
                experience_type: 2 years
      responses:
        "200":
          description: It will success message if job advert updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: job advert updated succesfully
